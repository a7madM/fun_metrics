exit
c
ุค
c
klass
c
ObjectSpace.each_object(Class).count
ObjectSpace.each_object(Class)
ObjectSpace
exit
c
klass
c
klass
c
klass
c
observations.values.flatten[1]['sum']
observations.values
observations
      expect(observations.count).not_to be_zero
duration_metric.get(labels: { class: obj.class.name, method: :foo })
duration_metric.get(labels: {class: "TestClass"})
duration_metric.get(lables: {class: "TestClass"})
observations.get(lables: {class: "TestClass"})
observations.get({class: "TestClass"})
observations
observations.count
c
      expect(bar_duration_metric).is_a?(Hash)
bar_duration_metric.is_a?(Hash)
bar_duration_metric.hash?
bar_duration_metric.class
bar_duration_metric
c
observations.flatten[1]["sum"]
observations.flatten[1]
observations.flatten
observations[{}]
observations[{}
observations.keys
observations["{}"]
observations
histogram.values.first
histogram.values
histogram.buckets
histogram
observations.first
observations["sum"]
observations.sum
observations[:sum]
observations.count
observations
observations[:count]
      observations = histogram.values
FunMetrics.metrics[:testclass_foo_duration_seconds]
histogram
c
counter_foo
c
FunMetrics.registry
c
FunMetrics.registry
c
FunMetrics.registry
FunMetrics.metrics
counter_foo
c
FunMetrics.metrics[:testclass_foo_calls]
FunMetrics.metrics
FunMetrics.registry
FunMetrics
name
c
FunMetrics.metrics[:foo_calls]
FunMetrics.metrics
c
registry
c
